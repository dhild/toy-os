cmake_minimum_required(VERSION 3.2)

project(TOY_OS)

set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake)

include(make_debug_targets)

set(CMAKE_ASM_NASM_OBJECT_FORMAT elf64)
enable_language(ASM_NASM)

set(TOY_OS_VERSION_MAJOR 0)
set(TOY_OS_VERSION_MINOR 0)
set(TOY_OS_VERSION_PATCH 1)

set(PACKAGE_VERSION "${TOY_OS_VERSION_MAJOR}.${TOY_OS_VERSION_MINOR}.${TOY_OS_VERSION_PATCH}")

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/build")

set_property(GLOBAL PROPERTY USE_FOLDERS ON)

set(BUILD_SHARED_LIBS OFF)

set(TOY_OS_TARGET_ARCH "x86_64"
        CACHE STRING "Set arch to use for TOY_OS.")
set(TOY_OS_TARGET_PLATFORM "pc"
        CACHE STRING "Set platform to use for TOY_OS.")
set(TOY_OS_TARGET_TRIPLE "x86_64-pc-elf" CACHE STRING
        "Default target for which TOY_OS will generate code.")
set(CMAKE_C_COMPILER_TARGET ${TOY_OS_TARGET_TRIPLE})
set(CMAKE_CXX_COMPILER_TARGET ${TOY_OS_TARGET_TRIPLE})
set(CMAKE_LINKER ld)
set(CMAKE_LINKER_TARGET ${TOY_OS_TARGET_TRIPLE})

set(CMAKE_STAGING_PREFIX ${TOY_OS_DISK_DIR})
set(CMAKE_INSTALL_PREFIX ${TOY_OS_DISK_DIR})
set(CMAKE_SYSROOT ${TOY_OS_SYSROOT_DIR})
set(CMAKE_FIND_ROOT_PATH ${TOY_OS_DISK_DIR})
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

set(CMAKE_INCLUDE_CURRENT_DIR ON)
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -v -march=x86-64 -m64 -mcmodel=large")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -v -march=x86-64 -fno-rtti -m64 -mcmodel=large -std=c++11")

set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wextra")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra")
set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -pedantic")
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pedantic")
add_compile_options(-Wall)
add_compile_options(-g)

include_directories("libc/include")

add_subdirectory(kernel)
add_subdirectory(libc)

